import { useEffect, useState, useCallback, useMemo } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import PropertyForm from '../components/PropertyForm';
import { toast } from 'react-toastify';
import { FaChartBar, FaBox, FaTags, FaListUl, FaPlus, FaTable, FaTachometerAlt, FaArrowLeft, FaArrowRight, FaUser, FaSignOutAlt } from 'react-icons/fa';        
import { Line, Pie } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
import { CategoryScale, LinearScale, PointElement, LineElement, Title } from 'chart.js';

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  ArcElement,
  Tooltip,
  Legend
);

// Format currency helper
const formatCurrency = (amount) => `â‚¦${(amount/100).toLocaleString()}`;

// Format date helper
const formatDate = (date) => {
  if (!date) return '';
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  });
};

function AdminDashboardPage() {
  const [activeSection, setActiveSection] = useState('analytics');
  const [productSubSection, setProductSubSection] = useState('view');
  const [sidebarExpanded, setSidebarExpanded] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [properties, setProperties] = useState([]);
  const [transactions, setTransactions] = useState([]);
  const [newProduct, setNewProduct] = useState({ 
    name: '', price: '', category: '', condition: 'new',
    description: '', stock: '', images: [], 
    address: '', city: '', state: '', zipCode: ''
  });
  const [editingProduct, setEditingProduct] = useState(null);
  const [viewingProduct, setViewingProduct] = useState(null);
  const [newCategory, setNewCategory] = useState({ name: '', description: '' });
  const [editingCategory, setEditingCategory] = useState(null);
  const [newProperty, setNewProperty] = useState({
    title: '', description: '', price: '', category: '',
    images: [], location: { address: '', city: '', state: '', zipCode: '' },
    availableTimeSlots: []
  });
  const [editingProperty, setEditingProperty] = useState(null);
  const [viewingProperty, setViewingProperty] = useState(null);

  const [loadingProducts, setLoadingProducts] = useState(false);
  const [errorProducts, setErrorProducts] = useState(null);
  const [loadingCategories, setLoadingCategories] = useState(false);
  const [errorCategories, setErrorCategories] = useState(null);
  const [loadingAddProduct, setLoadingAddProduct] = useState(false);
  const [loadingEditProduct, setLoadingEditProduct] = useState(false);
  const [loadingDeleteProduct, setLoadingDeleteProduct] = useState(false);
  const [loadingAddCategory, setLoadingAddCategory] = useState(false);
  const [loadingEditCategory, setLoadingEditCategory] = useState(false);
  const [loadingDeleteCategory, setLoadingDeleteCategory] = useState(false);
  const [loadingProperties, setLoadingProperties] = useState(false);
  const [errorProperties, setErrorProperties] = useState(null);
  const [loadingAddProperty, setLoadingAddProperty] = useState(false);
  const [loadingEditProperty, setLoadingEditProperty] = useState(false);
  const [loadingDeleteProperty, setLoadingDeleteProperty] = useState(false);
  const [loadingTransactions, setLoadingTransactions] = useState(false);
  const [errorTransactions, setErrorTransactions] = useState(null);

  const { token, userInfo } = useSelector((state) => state.user);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  
  // Handle logout
  const handleLogout = () => {
    dispatch({ type: 'user/logout' });
    navigate('/login');
    toast.success('Logged out successfully');
  };

  // Fetch products, categories, properties, and transactions using the same functions from original file
  // Add your fetch functions and handlers here (copied from original file)
  
  // Calculate stats and analytics
  const transactionAnalytics = useMemo(() => {
    if (!transactions.length) return null;
    
    const totalRevenue = transactions.reduce((sum, t) => sum + t.amount, 0);
    const completedTransactions = transactions.filter(t => t.status === 'completed');
    const pendingTransactions = transactions.filter(t => t.status === 'pending');
    const failedTransactions = transactions.filter(t => t.status === 'failed');
    
    return {
      totalRevenue,
      completed: completedTransactions.length,
      completedRevenue: completedTransactions.reduce((sum, t) => sum + t.amount, 0),
      pending: pendingTransactions.length,
      pendingRevenue: pendingTransactions.reduce((sum, t) => sum + t.amount, 0),
      failed: failedTransactions.length
    };
  }, [transactions]);

  // Add other helper functions, handlers and side effects from the original file
  
  // Load data on mount and when active section changes
  useEffect(() => {
    // Initial data fetch
    //Promise.all([fetchProperties(), fetchCategories()]);
    
    // Section-specific data fetching
    if (activeSection === 'products') {
      //fetchProducts();
    } else if (activeSection === 'analytics') {
      //fetchTransactions();
      //fetchProducts();
    }
  }, [activeSection]);

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar Navigation */}      
      <div className={`${sidebarExpanded ? 'w-64' : 'w-20'} bg-gray-900 text-gray-100 transition-all duration-300 ease-in-out flex flex-col h-screen fixed border-r border-gray-800`}>        
        <div className="p-4 space-y-4 bg-gray-800">
          <div className="flex items-center justify-between">
            {sidebarExpanded && <h1 className="text-xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">Admin Panel</h1>}
            <button 
              onClick={() => setSidebarExpanded(!sidebarExpanded)} 
              className="p-2 rounded-full hover:bg-blue-700 transition-colors"
            >
              {sidebarExpanded ? <FaArrowLeft /> : <FaArrowRight />}
            </button>
          </div>
          {userInfo && (
            <>
              {sidebarExpanded ? (
                <div className="flex items-center space-x-2 py-2 px-3 rounded-lg bg-gray-800/80">
                  <div className="flex items-center flex-1">
                    <FaUser className="text-blue-400 mr-2" />
                    <div className="truncate">
                      <p className="text-sm font-medium text-gray-200">{userInfo.name}</p>
                      <p className="text-xs text-gray-400">Administrator</p>
                    </div>
                  </div>
                  <button
                    onClick={handleLogout}
                    className="p-1.5 rounded-full bg-gray-700 hover:bg-red-600 transition-colors"
                    title="Logout"
                  >
                    <FaSignOutAlt className="text-gray-300" />
                  </button>
                </div>
              ) : (
                <div className="flex flex-col items-center space-y-2 py-2">
                  <div className="w-10 h-10 bg-gray-800 rounded-full flex items-center justify-center">
                    <FaUser className="text-blue-400" />
                  </div>
                  <button
                    onClick={handleLogout}
                    className="w-8 h-8 rounded-full bg-gray-700 hover:bg-red-600 flex items-center justify-center transition-colors"
                    title="Logout"
                  >
                    <FaSignOutAlt className="text-gray-300 text-sm" />
                  </button>
                </div>
              )}
            </>
          )}
        </div>
        
        <nav className="flex-1 overflow-y-auto py-4">
          <ul className="space-y-2">
            <li>
              <button
                onClick={() => setActiveSection('analytics')}
                className={`flex items-center w-full p-3 ${sidebarExpanded ? 'justify-start' : 'justify-center'} 
                ${activeSection === 'analytics' ? 'bg-gray-800 border-l-4 border-blue-400' : 'hover:bg-gray-800'} transition-all duration-200 rounded-lg mx-2 my-1`}
              >
                <FaChartBar className={`${sidebarExpanded ? 'mr-3' : 'mx-auto'} text-xl`} />
                {sidebarExpanded && <span>Analytics</span>}
              </button>
            </li>
            <li>
              <button
                onClick={() => setActiveSection('products')}
                className={`flex items-center w-full p-3 ${sidebarExpanded ? 'justify-start' : 'justify-center'} 
                ${activeSection === 'products' ? 'bg-gray-800 border-l-4 border-blue-400' : 'hover:bg-gray-800'} transition-all duration-200 rounded-lg mx-2 my-1`}
              >
                <FaBox className={`${sidebarExpanded ? 'mr-3' : 'mx-auto'} text-xl`} />
                {sidebarExpanded && <span>Products</span>}
              </button>
            </li>
            <li>
              <button
                onClick={() => setActiveSection('categories')}
                className={`flex items-center w-full p-3 ${sidebarExpanded ? 'justify-start' : 'justify-center'} 
                ${activeSection === 'categories' ? 'bg-gray-800 border-l-4 border-blue-400' : 'hover:bg-gray-800'} transition-all duration-200 rounded-lg mx-2 my-1`}
              >
                <FaTags className={`${sidebarExpanded ? 'mr-3' : 'mx-auto'} text-xl`} />
                {sidebarExpanded && <span>Categories</span>}
              </button>
            </li>
            <li>
              <button
                onClick={() => setActiveSection('properties')}
                className={`flex items-center w-full p-3 ${sidebarExpanded ? 'justify-start' : 'justify-center'} 
                ${activeSection === 'properties' ? 'bg-gray-800 border-l-4 border-blue-400' : 'hover:bg-gray-800'} transition-all duration-200 rounded-lg mx-2 my-1`}
              >
                <FaListUl className={`${sidebarExpanded ? 'mr-3' : 'mx-auto'} text-xl`} />
                {sidebarExpanded && <span>Properties</span>}
              </button>
            </li>
            
            {/* Logout Button */}
            <li className="mt-auto">
              <button
                onClick={handleLogout}
                className={`flex items-center w-full p-3 ${sidebarExpanded ? 'justify-start' : 'justify-center'} 
                bg-red-500/10 hover:bg-red-500/20 text-red-400 transition-all duration-200 rounded-lg mx-2 my-1`}
              >
                <FaSignOutAlt className={`${sidebarExpanded ? 'mr-3' : 'mx-auto'} text-xl`} />
                {sidebarExpanded && <span>Logout</span>}
              </button>
            </li>
          </ul>
        </nav>
      </div>
      
      {/* Main Content */}
      <div className={`flex-1 ${sidebarExpanded ? 'ml-64' : 'ml-20'} transition-all duration-300 ease-in-out`}>
        <div className="p-6">
          <h1 className="text-2xl font-bold mb-6 flex items-center">
            {activeSection === 'analytics' && <FaTachometerAlt className="mr-3 text-blue-600" />}
            {activeSection === 'products' && (productSubSection === 'view' ? <FaTable className="mr-3 text-blue-600" /> : <FaPlus className="mr-3 text-blue-600" />)}
            {activeSection === 'categories' && <FaTags className="mr-3 text-blue-600" />}
            {activeSection === 'properties' && <FaListUl className="mr-3 text-blue-600" />}
            {activeSection === 'analytics' && 'Dashboard Analytics'}
            {activeSection === 'products' && (productSubSection === 'view' ? 'View Products' : 'Add New Product')}
            {activeSection === 'categories' && 'Manage Categories'}
            {activeSection === 'properties' && 'Manage Properties'}
          </h1>

          {/* Analytics Section */}
          {activeSection === 'analytics' && (
            <section className="space-y-6">
              {/* Summary Cards */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                  <h3 className="text-gray-500 text-sm font-medium">Products Overview</h3>
                  <p className="text-3xl font-bold text-gray-800">{products.length}</p>
                  <div className="mt-2 text-xs text-blue-600">
                    {products.filter(p => p.published).length} Published Products
                  </div>
                </div>
                <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                  <h3 className="text-gray-500 text-sm font-medium">Properties Listed</h3>
                  <p className="text-3xl font-bold text-gray-800">{properties.length}</p>
                  <div className="mt-2 text-xs text-blue-600">
                    {categories.length} Active Categories
                  </div>
                </div>
                <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                  <h3 className="text-gray-500 text-sm font-medium">Total Revenue</h3>
                  <p className="text-3xl font-bold text-gray-800">
                    {formatCurrency(transactionAnalytics?.totalRevenue || 0)}
                  </p>
                  <div className="mt-2 text-xs text-blue-600">
                    {transactions.length} Total Transactions
                  </div>
                </div>
              </div>

              {/* Payment Status Cards */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                  <h3 className="text-gray-500 text-sm font-medium">Completed Payments</h3>
                  <p className="text-3xl font-bold text-green-600">
                    {transactionAnalytics?.completed || 0} 
                  </p>
                  <div className="mt-2 text-sm text-gray-600">
                    {formatCurrency(transactionAnalytics?.completedRevenue || 0)}
                  </div>
                  <div className="mt-2 bg-green-50 text-green-600 text-xs py-1 px-2 rounded inline-block">
                    {Math.round(((transactionAnalytics?.completed || 0) / (transactions.length || 1)) * 100)}% Success Rate
                  </div>
                </div>
                
                <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                  <h3 className="text-gray-500 text-sm font-medium">Pending Payments</h3>
                  <p className="text-3xl font-bold text-yellow-600">
                    {transactionAnalytics?.pending || 0}
                  </p>
                  <div className="mt-2 text-sm text-gray-600">
                    {formatCurrency(transactionAnalytics?.pendingRevenue || 0)}
                  </div>
                  <div className="mt-2 bg-yellow-50 text-yellow-600 text-xs py-1 px-2 rounded inline-block">
                    {Math.round(((transactionAnalytics?.pending || 0) / (transactions.length || 1)) * 100)}% of All Transactions
                  </div>
                </div>
                
                <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                  <h3 className="text-gray-500 text-sm font-medium">Failed Payments</h3>
                  <p className="text-3xl font-bold text-red-600">
                    {transactionAnalytics?.failed || 0}
                  </p>
                  <div className="mt-2 bg-red-50 text-red-600 text-xs py-1 px-2 rounded inline-block">
                    {Math.round(((transactionAnalytics?.failed || 0) / (transactions.length || 1)) * 100)}% Failure Rate
                  </div>
                </div>
              </div>

              {/* Charts */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                  <h3 className="text-lg font-semibold mb-4">Recent Transactions</h3>
                  {loadingTransactions ? (
                    <p>Loading transaction data...</p>
                  ) : transactions.length === 0 ? (
                    <p className="text-gray-500">No transaction data available</p>
                  ) : (
                    <div className="space-y-2">
                      {transactions.slice(0, 5).map((transaction) => (
                        <div key={transaction._id} className="flex justify-between items-center p-2 hover:bg-gray-50 rounded">
                          <div>
                            <p className="font-medium text-sm">{transaction.productName || 'Unknown Product'}</p>
                            <p className="text-xs text-gray-500">{formatDate(transaction.createdAt)}</p>
                          </div>
                          <div className="text-right">
                            <p className={`font-medium ${
                              transaction.status === 'completed' ? 'text-green-600' : 
                              transaction.status === 'pending' ? 'text-yellow-600' : 'text-red-600'
                            }`}>
                              {formatCurrency(transaction.amount)}
                            </p>
                            <span className={`text-xs px-1.5 py-0.5 rounded ${
                              transaction.status === 'completed' ? 'bg-green-100 text-green-800' : 
                              transaction.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'
                            }`}>
                              {transaction.status}
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
                
                <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                  <h3 className="text-lg font-semibold mb-4">Category Distribution</h3>
                  <div className="h-64 flex items-center justify-center">
                    {categories.length > 0 && products.length > 0 ? (
                      <Pie 
                        data={{
                          labels: categories.map(c => c.name),
                          datasets: [
                            {
                              data: categories.map(category => 
                                products.filter(p => p.category && p.category._id === category._id).length
                              ),
                              backgroundColor: [
                                'rgba(54, 162, 235, 0.6)',
                                'rgba(255, 99, 132, 0.6)',
                                'rgba(255, 206, 86, 0.6)',
                                'rgba(75, 192, 192, 0.6)',
                                'rgba(153, 102, 255, 0.6)',
                              ],
                              borderColor: [
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 99, 132, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                              ],
                              borderWidth: 1,
                            },
                          ],
                        }}
                        options={{
                          responsive: true,
                          maintainAspectRatio: false,
                          plugins: {
                            legend: {
                              position: 'right',
                            }
                          }
                        }}
                      />
                    ) : (
                      <p className="text-gray-500">No data available for visualization</p>
                    )}
                  </div>
                </div>
              </div>
            </section>
          )}
          
          {/* Other sections content */}
          {/* Products Section */}
          {/* Categories Section */}
          {/* Properties Section */}
        </div>
      </div>
    </div>
  );
}

export default AdminDashboardPage;
