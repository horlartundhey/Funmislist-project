const express = require('express');
const Transaction = require('../models/transactionModel');
const User = require('../models/User');
const { generateOrderNumber } = require('../utils/orderUtils');
const router = express.Router();

// Test route
router.get('/test', (req, res) => {
  res.json({ message: 'Test route is working!' });
});

// Test endpoint to create a sample transaction with order number
router.post('/create-sample-transaction', async (req, res) => {
  try {
    // Find any user or create a test user
    let testUser = await User.findOne({ email: 'test@example.com' });
    if (!testUser) {
      testUser = await User.create({
        name: 'Test User',
        email: 'test@example.com',
        password: 'testpassword123'
      });
    }

    // Create a sample transaction
    const sampleTransaction = await Transaction.create({
      reference: `test_ref_${Date.now()}`,
      user: testUser._id,
      amount: 25000, // â‚¦250
      status: 'success'
      // orderNumber will be auto-generated by the pre-save hook
    });

    // Populate the transaction to see the full data
    const populatedTransaction = await Transaction
      .findById(sampleTransaction._id)
      .populate('user', 'name email');

    res.status(201).json({
      message: 'Sample transaction created successfully',
      transaction: populatedTransaction
    });
  } catch (error) {
    console.error('Error creating sample transaction:', error);
    res.status(500).json({
      message: 'Failed to create sample transaction',
      error: error.message
    });
  }
});

// Test endpoint to generate order number manually
router.get('/generate-order-number', async (req, res) => {
  try {
    const orderNumber = await generateOrderNumber();
    res.status(200).json({
      orderNumber,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error generating order number:', error);
    res.status(500).json({
      message: 'Failed to generate order number',
      error: error.message
    });
  }
});

// Get all transactions with order numbers
router.get('/transactions', async (req, res) => {
  try {
    const transactions = await Transaction
      .find()
      .populate('user', 'name email')
      .populate('product', 'name price')
      .populate('property', 'title price')
      .sort({ createdAt: -1 })
      .limit(10);

    res.status(200).json({
      transactions,
      count: transactions.length
    });
  } catch (error) {
    console.error('Error fetching transactions:', error);
    res.status(500).json({
      message: 'Failed to fetch transactions',
      error: error.message
    });
  }
});

// Get all users with verification tokens for debugging
router.get('/debug-users', async (req, res) => {
  try {
    const users = await User
      .find({})
      .select('email isEmailVerified emailVerificationToken emailVerificationExpires createdAt')
      .sort({ createdAt: -1 })
      .limit(10);

    const debugInfo = users.map(user => ({
      email: user.email,
      isEmailVerified: user.isEmailVerified,
      hasVerificationToken: !!user.emailVerificationToken,
      tokenExpires: user.emailVerificationExpires,
      createdAt: user.createdAt,
      tokenLength: user.emailVerificationToken ? user.emailVerificationToken.length : 0
    }));

    res.status(200).json({
      users: debugInfo,
      count: users.length
    });
  } catch (error) {
    console.error('Error fetching debug users:', error);
    res.status(500).json({
      message: 'Failed to fetch debug users',
      error: error.message
    });
  }
});

module.exports = router;